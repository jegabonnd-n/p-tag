모델 훈련 과정
가중치를 무작위 값으로 초기화
모든 샘플에 대하여 방향과 역방향 계산을 수행하여 가중치를 조금씩 학습(업데이트).

이미지 분류 : 합성곱 신경망
합성곱 신경망 : 완전 연결 신경망보다 훨씬 가중치가 작으면서도 이미지 분류 문제를 잘 해결

합성곱 연산
합성곱은 두 함수에 적용하여 새로운 함수를 만드는 수학 연산자

1. 배열 하나 선택하여 뒤집기 : numpy.flip()



필터 = 커널 = (뉴런)

패딩과 스트라이드
패딩 : 밸리드(valid) 패딩 / 풀(full) 패딩 / 세임(same) 패딩

밸리드 패딩 : 원본 배열의 원소가 합송곱 연산에 참여하는 정도가 서로 다르다.
풀패딩 : 원본 배열 원소의 연산 참여도가 동일
세임 패딩 : 출력 배열의 길이를 원본 배열의 길이와 동일하게 만든다.
=> 풀 패딩과 세임 패딩은 1차원 배열일 경구, 왼쪽과 오른쪽에 가상의 원소(0)를 추가

스트라이드 : 원본 배열에서 이동하는 간격(값)



풀링(pooling) 연산
합성곱과 활성화 함수가 적용되어 특성 맵이 만들어지고, 특성 맵이 풀링 층을 통과하여 또 다른 특성앱이 생성

Max풀링 : 최대값 사용
Average풀링 : 평균값 사용

합성곱 신경망 구조
합성곱 층 : 1. 이미지 / 2. 커널(필텈) => 3. 특성맵 => 활성화 함수 (ReLU)
풀링 층 : 1. 풀링 => 특성맵 => 1차원
완전 연결 층 : 출력층 => 활성화 함수(softmax)

```
# 실행마다 동일한 결과를 얻기 위해 케라스에 랜덤 시드를 사용하고 텐서플로 연산을 결정적으로 만듭니다. 
import tensorflow as tf

tf.keras.utils.set_random_seed(42)
tf.config.experimental.enable_op_determinism()
```

```
keras.utils.plot_model(model, show_shapes=True, to_file='cnn-architecture.png', dpi=300)
```
합성곱 신경망 만들고 훈련
케라스 합성곱 신경망

